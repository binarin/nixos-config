#!/usr/bin/env bash
TEMP=$(getopt -o n:b:r: --long branch-name:,base-ref:,result-file: -n "wt-maker" -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
eval set -- "$TEMP"

RESULT_FILE=
BRANCH_NAME=
BASE_REF=
while true; do
    case "$1" in
        -n | --branch-name ) BRANCH_NAME="$2"; shift 2 ;;
        -b | --base-ref ) BASE_REF="$2"; shift 2 ;;
        -r | --result-file ) RESULT_FILE="$2"; shift 2 ;;
        -- ) shift; break ;;
        * ) break ;;
    esac
done

if [[ -z $RESULT_FILE || -z $BRANCH_NAME ]] ; then
    echo "Usage: $0 --branch-name <bn> --result-file <rf> --base-ref <br>"
    exit 1
fi

if [[ -z $BASE_REF ]]; then
    HEAD_BRANCH=$(LANG=C git remote show origin | sed -n '/HEAD branch/s/.*: //p')
    BASE_REF=origin/$HEAD_BRANCH
fi

# first worktree in the list is the main one
WORKTREE=$(git worktree list --porcelain | head -n1 | sed -e 's/^worktree //')
BRANCHES_DIR=$(dirname $WORKTREE)

if ! [[ $BRANCHES_DIR =~ '-branches$' ]] ; then
    BRANCHES_DIR=$WORKTREE-branches
fi

NEW_WT=$BRANCHES_DIR/$BRANCH_NAME
git fetch --all
# git fetch origin $BASE_REF || true
git worktree add $NEW_WT -b $BRANCH_NAME $(git rev-parse "$BASE_REF")

if [[ ! -d $NEW_WT ]]; then
    echo "Failed to clone"
    exit 1
fi

cd $NEW_WT

if [[ -f user-template.bazelrc ]]; then
    cat user-template.bazelrc | sed -e "/:ct_logdir/s,=.*$,=$NEW_WT/ct_logs," > user.bazelrc
    echo 'build --disk_cache=~/.cache/bazel-shared-cache' >> user.bazelrc
fi

bazel run //tools:symlink_deps_for_erlang_ls || true

echo -n "$NEW_WT" > $RESULT_FILE
