# -*- nix -*-
{ config, lib, pkgs, ... }:
let
  hosts = import ./nixops/personal-hosts.nix;
  hostName = "barbatos";
  hostConf = hosts.${hostName};
in
{
  imports = [
    <nixpkgs/nixos/modules/installer/scan/not-detected.nix>

    ./modules/force-my-version.nix

    ./profile/my-vpn-server.nix
    ./profile/pi-hole-in-docker.nix
    ./profile/server.nix
    ./users/binarin.nix
    ./profile/emacs.nix
  ];

  my-vpn-server.enable = true;

  services.pi-hole = {
    enable = true;
    bindIp = hostConf.lan.ip;
    dnsMasqConfig = ''
      server=/localdomain/192.168.2.1
      server=/2.168.192.in-addr.arpa/192.168.2.1
    '';
  };

  networking = {
    hostName = hostName;
    hostId = hostConf.hostId;

    useDHCP = false;

    defaultGateway = {
      address = hosts.usg.lan.ip;
      interface = "br0";
    };
    nameservers = [
      hostConf.lan.ip
      hosts.usg.lan.ip
      "8.8.8.8"
    ];
    search = hosts.usg.searchDomains;
    domain = hosts.usg.domain;

    interfaces = {
      enp6s0 = {
        macAddress = "9e:e2:64:f5:00:fe"; # something random, to move original hw address to br0
      };

      br0 = {
        ipv4.addresses = [
          { address = hostConf.lan.ip; prefixLength = 24; }
        ];
        macAddress = hostConf.lan.mac;
      };

    };

    bridges = {
      br0 = {
        interfaces = [ "enp6s0" ];
      };
    };

  };

  virtualisation.libvirtd.enable = true;
  environment.systemPackages = [ pkgs.virtinst pkgs.libguestfs-with-appliance ];

  nix.maxJobs = lib.mkDefault 24;

  boot.initrd.availableKernelModules = [ "uhci_hcd" "ehci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  boot.loader.grub.enable = true;
  boot.loader.grub.version = 2;
  boot.loader.grub.devices = [ "/dev/sda" "/dev/sdb" ];
  boot.supportedFilesystems = [ "zfs "];

  fileSystems."/" = {
    device = "rpool/root/nixos";
    fsType = "zfs";
  };

  fileSystems."/home" = {
    device = "rpool/home";
    fsType = "zfs";
  };

  fileSystems."/var/lib/libvirt/images/hass" = {
    device = "rpool/vm-images/hass";
    fsType = "zfs";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-label/boot";
    fsType = "ext4";
  };

}
