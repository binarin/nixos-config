# -*- nix -*-
{ config, pkgs, ... }:

let
  vpnIp = "10.10.10.1";
  vpnNet = "10.10.10.0/24";
  vpnIface = "ovpn-server";
  hosts = import ./nixops/personal-hosts.nix;
in
{
  networking.hostName = "amon";
  networking.hostId = "ef633c75";

  imports = [
    <nixpkgs/nixos/modules/installer/scan/not-detected.nix>
    ./hardware/hp-microserver.nix
    ./modules/force-my-version.nix
    ./modules/rabbitmq-server.nix
    ./roles/server.nix
    ./users/binarin.nix
    ./packages/use-my-overlays.nix
    ./roles/emacs.nix
    ./roles/home-assistant.nix

    ./nixpkgs-master/nixos/modules/virtualisation/lxd.nix
    ./nixpkgs-master/nixos/modules/services/torrent/transmission.nix
  ];

  boot.loader.grub.enable = true;
  boot.loader.grub.version = 2;
  boot.loader.grub.devices = [ "/dev/sda" "/dev/sdb" "/dev/sdc" "/dev/sdd" ];

  boot.supportedFilesystems = [ "zfs" ];

  services.zfs.autoScrub.enable = true;

  fileSystems."/" =
    { device = "tank/root/nixos";
      fsType = "zfs";
    };

  # 16k record size, for bit-torrent
  fileSystems."/media" =
    { device = "tank/root/media";
      fsType = "zfs";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-label/boot";
      fsType = "ext4";
    };

  services.fail2ban.enable = true;

  networking.firewall.enable = true;
  networking.firewall.allowedTCPPorts = [
    22000 # Syncthing
    80 443
  ];
  networking.firewall.allowedUDPPorts = [
    21027 # Syncthing
  ];
  networking.firewall.logRefusedConnections = false;
  networking.firewall.extraCommands = ''
    ip46tables -A nixos-fw -i ${vpnIface} -p tcp --dport 3128 -j nixos-fw-accept
    ip46tables -A nixos-fw -i ${vpnIface} -p tcp --dport 4242 -j nixos-fw-accept
    ip46tables -A nixos-fw -i enp3s0 -p tcp --dport 8123 -j nixos-fw-accept  # hass
    iptables -A nixos-fw -i enp3s0 -p tcp -s 192.168.2.0/24 --dport 4000:4002 -j nixos-fw-accept # nfs server
    iptables -A nixos-fw -i enp3s0 -p tcp -s 192.168.2.0/24 --dport 2049 -j nixos-fw-accept # nfs server
    iptables -A nixos-fw -i enp3s0 -p udp -s 192.168.2.0/24 --dport 2049 -j nixos-fw-accept # nfs server
  '';

  environment.systemPackages = with pkgs; [
    bitcoin
    erlangR20
    syncthing
    yandex-disk
    youtube-dl
    insync
    gptfdisk
    hdparm
    smartmontools
  ];

  services.journald.rateLimitInterval = "30s";
  services.journald.rateLimitBurst = 7000;

  services.nginx.enable = true;
  services.nginx.recommendedTlsSettings = true;

  users.extraGroups.acme-reader.gid = 2000;
  users.extraUsers.nginx.extraGroups = [ "acme-reader" ];
  security.acme.certs."amon.binarin.ru" = {
    group = "acme-reader";
    allowKeysForGroup = true;
    postRun = ''
      chmod g+r /var/lib/acme/amon.binarin.ru/*.pem # */
    '';
  };

  services.nginx.virtualHosts."amon.binarin.ru" = {
    forceSSL = true;
    enableACME = true;
    locations."/" = {
      root = "/var/www/";
    };
  };

  services.nfs.server = {
    enable = true;
    exports = ''
      /media/shared ${hosts.kodi.lan.ip}(ro,all_squash,anonuid=1000,anongid=${builtins.toString config.ids.gids.transmission}) ${hosts.ishamael.lan.ip}(rw,all_squash,anonuid=1000,anongid=${builtins.toString config.ids.gids.transmission}) ${hosts.ishamael.wifi.ip}(rw,all_squash,anonuid=1000,anongid=${builtins.toString config.ids.gids.transmission}) ${hosts.rpi3.lan.ip}(rw,all_squash,anonuid=1000,anongid=${builtins.toString config.ids.gids.transmission}) ${hosts.rpi3.wlan.ip}(rw,all_squash,anonuid=1000,anongid=${builtins.toString config.ids.gids.transmission})
    '';
    lockdPort = 4001;
    mountdPort = 4002;
    statdPort = 4000;
  };

  services.printing.enable = true;
  services.printing.drivers = [ pkgs.hplip pkgs.postscript-lexmark pkgs.epson-escpr ];

  services.transmission = {
    enable = true;
    settings = {
      download-dir = "/media/shared/";
      incomplete-dir = "/media/incomplete-torrents/";
      incomplete-dir-enabled = true;
      rpc-whitelist = "127.0.0.1,192.168.*.*,10.10.10.*";
    };
  };

  disabledModules = [ "virtualisation/lxd.nix" "services/torrent/transmission.nix" ];

  nixpkgs.config.packageOverrides = super: rec {
    lxd = pkgs.bleeding.lxd;
    runtimeShell = pkgs.bleeding.runtimeShell;
  };

  virtualisation.lxd = {
    enable = true;
    zfsSupport = true;
  };
}
