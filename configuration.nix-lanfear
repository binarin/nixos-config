# -*- nix -*-
{ config, lib, pkgs, ... }:

{
  networking.hostName = "lanfear";
  networking.hostId = "2d75caa8";

  imports = [
    <nixpkgs/nixos/modules/installer/scan/not-detected.nix>
    ./hardware/intel.nix
    ./partitions/unencrypted-uefi-ext4.nix
    ./roles/server.nix
    ./users/binarin.nix
    ./roles/emacs.nix
  ];

  system.fsPackages = [ pkgs.ntfs3g ];

  services.vault = {
    enable = true;
    storageBackend = "file";
  };
  environment.systemPackages = [ pkgs.vault ];
  virtualisation.docker.enable = true;
  virtualisation.libvirtd.enable = true;

  networking.firewall.allowedTCPPorts = [
    80 443
  ];

  security.pam.services.nginx = {
    name = "nginx";
    unixAuth = true;
  };

  services.nginx.package = pkgs.nginx.override {
    modules = [pkgs.nginxModules.pam];
  };

  users.extraGroups.shadow.gid = 2001;
  users.extraUsers.nginx.extraGroups = [ "shadow" ];
  system.activationScripts.shadowGroup = lib.stringAfter [ "users" ] ''
    chgrp shadow /etc/shadow
    chmod g+r /etc/shadow
  '';

  services.nginx.enable = true;
  services.nginx.virtualHosts."org.binarin.ru" = {
    forceSSL = true;
    enableACME = true;
    locations."/" = {
      root = "/var/www/org/";
      index = "index.html";
      extraConfig = ''
        auth_pam    "Secure Zone";
        auth_pam_service_name   "nginx";
      '';
    };
  };


  systemd.services."org-agenda-render" = let
    script = pkgs.writeScript "org-agenda-render" ''
      #!${pkgs.bash}/bin/bash
      export PATH=/run/current-system/sw/bin:$PATH
      $HOME/.rc/agenda-gen.sh
    '';
  in {
    description = "Pre-render org-mode agendas to .html";
    serviceConfig = {
      Type = "oneshot";
      User = "binarin";
      ExecStart = script;
    };
  };
  systemd.timers."org-agenda-render" = {
    description = "Periodically fetches latest org files and pre-generates .html agenda";
    wantedBy = [ "timers.target" ];
    timerConfig = {
      OnBootSec = "15min";
      OnUnitActiveSec = "30min";
    };
  };

  services.dnsmasq.enable = false;

  systemd.services."pi-hole" = let
    stateDir = "/var/lib/pihole/";
    serverIP = "192.168.2.4";
    script = pkgs.writeScript "pi-hole-in-docker" ''
      #!${pkgs.bash}/bin/bash
      docker run --rm -t \
      --name pihole \
      -p 53:53/tcp -p 53:53/udp \
      -p 67:67/udp \
      -p 30080:80 \
      -p 30443:443 \
      -v "${stateDir}/pihole/:/etc/pihole/" \
      -v "${stateDir}/dnsmasq.d/:/etc/dnsmasq.d/" \
      -e ServerIP="${serverIP}" \
      --cap-add=NET_ADMIN \
      --dns=127.0.0.1 --dns=1.1.1.1 \
      pihole/pihole:latest
    '';
  in {
    description = "Starts pi-hole docker container";
    after = [ "docker.service "];
    wants = [ "wants.service "];
    wantedBy = [ "default.target" ];
    path = [ pkgs.docker ];
    serviceConfig = {
      ExecStart = script;
    };
  };
}
